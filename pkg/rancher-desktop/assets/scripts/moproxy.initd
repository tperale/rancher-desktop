#!/sbin/openrc-run

name=moproxy

description="A transparent TCP to SOCKSv5/HTTP proxy."

extra_started_commands="enable disable reload"
description_enable="Start redirecting the network traffic to the HTTP proxy."
description_disable="Stop redirecting the network traffic to the HTTP proxy."
description_reload="Reload the proxy list."

# TCP Listen address
: ${host:=${MOPROXY_HOST:-"::"}}
# TCP Listen port
: ${port:=${MOPROXY_PORT:-"2080"}}
# List of backend proxy servers
: ${proxy_list:=${MOPROXY_PROXYLIST:-"/etc/moproxy/proxy.ini"}}
# Additional arguments to pass to moproxy
: ${moproxy_args:=${MOPROXY_ARGS:-""}}
# Comma-seperated list of port traffic to redirect to moproxy
: ${ports_redirected:=${MOPROXY_REDIRECTED_PORT:-"80,443"}}
# Comma-seperated list of hostname to not redirect to the proxy
: ${noproxy_rules:=${MOPROXY_NOPROXY:-"0.0.0.0/8,10.0.0.0/8,127.0.0.0/8,169.254.0.0/16,172.16.0.0/12,192.168.0.0/16,224.0.0.0/4,240.0.0.0/4"}}

command="'${MOPROXY_BINARY:-/usr/sbin/moproxy}'"
command_args="--host ${host} --port ${port} --list ${proxy_list} ${moproxy_args}"
command_background="yes"
pidfile="/run/${name}.pid"

MOPROXY_LOGFILE="${MOPROXY_LOGFILE:-${LOG_DIR:-/var/log}/${RC_SVCNAME}.log}"
output_log="'${MOPROXY_LOGFILE}'"
error_log="'${MOPROXY_LOGFILE}'"

iptables_redirect() {
	iptables --table nat --$1 $2 --protocol tcp --match multiport --dports "${ports_redirected}" --jump REDIRECT --to-port "${port}"
}

iptables_accept() {
	iptables --table nat --$1 $2 --protocol tcp --match multiport --dports "${ports_redirected}" --destination $3 --jump ACCEPT
}

add_rule_to_chain() {
	if ! iptables_$1 check $2 $3 &> /dev/null
	then
		iptables_$1 append $2 $3
	else
		einfo "Rule already in table"
	fi
}

remove_rule_from_chain() {
	while iptables_$1 check $2 $3 &> /dev/null
	do
		iptables_$1 delete $2 $3
	done
}

add_noproxy_rules() {
	for i in ${noproxy_rules//,/ }
	do
		add_rule_to_chain accept OUTPUT $i
	done
}

remove_noproxy_rules() {
	for i in ${noproxy_rules//,/ }
	do
		remove_rule_from_chain accept OUTPUT $i
	done
}

depend() {
    after iptables ip6tables
}

enable() {
	einfo "Starting the iptables rules to start redirection of ports ${ports_redirected} to ${name}"
	add_noproxy_rules
	add_rule_to_chain redirect OUTPUT
	add_rule_to_chain redirect PREROUTING
}

disable() {
	einfo "Removing all the iptables rules to stop redirection to ${name}"
	remove_noproxy_rules
	remove_rule_from_chain redirect OUTPUT
	remove_rule_from_chain redirect PREROUTING
}

start_post() {
	enable
}

stop_pre() {
	disable
}

reload() {
	ebegin "Reloading ${name}"
	start-stop-daemon --signal HUP --pidfile "$pidfile"
}
