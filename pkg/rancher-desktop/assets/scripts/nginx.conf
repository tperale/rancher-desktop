worker_processes  auto;

error_log /var/log/openresty/error.log warn;

events {
    worker_connections  1024;
}

http {
    map_hash_bucket_size 128;
    include       mime.types;
    default_type  application/octet-stream;

    log_format proxy escape=json
      '{'
        '"access_time":"$time_local",'
        '"request":"$request",'
        '"status":"$status",'
        '"bytes_sent":"$body_bytes_sent",'
        '"host":"$host",'
        '"ssl_protocol":"$ssl_protocol",'
        '"connect_host":"$connect_host",'
        '"connect_port":"$connect_port",'
      '}';

    log_format mitm escape=json
      '{'
        '"access_time":"$time_local",'
        '"method":"$request_method",'
        '"uri":"$uri",'
        '"status":"$status",'
        '"bytes_sent":"$body_bytes_sent",'
        '"upstream_response_time":"$upstream_response_time",'
        '"host":"$host",'
        '"http_host":"$http_host",'
        '"upstream":"$upstream_addr"'
      '}';

    server {
        listen 3128;
        listen [::]:3128;
        server_name proxy;

        access_log /var/log/openresty/proxy.log proxy;

        proxy_connect;
        proxy_connect_allow all;
        proxy_connect_address 127.0.0.1:3129;
        proxy_max_temp_file_size 0;

        # response non-CONNECT requests
        location / {
            add_header "Content-type" "text/plain" always;
            return 404 "The Rancher Desktop image-allow-list proxy only allows CONNECT requests\n";
        }
    }

    map "$http_host$uri" $forbidden {
        default 1;
        include image-allow-list.conf;
    }

    # don't limit maximum request size to allow for pushing large image layers
    client_max_body_size 0;

    server {
        listen 3129 ssl default_server;
        server_name mitm;

        access_log /var/log/openresty/access.log mitm;

        # nginx complains if these are not set; we'll clear them again right after
        ssl_certificate /run/mkcert/localhost.pem;
        ssl_certificate_key /run/mkcert/localhost-key.pem;

        ssl_certificate_by_lua_block {
            local ssl = require "ngx.ssl"
            local name = ssl.server_name()

            local ok, err = ssl.clear_certs()
            if not ok then
                ngx.log(ngx.ERR, "failed to clear existing (fallback) certificates")
                return ngx.exit(ngx.ERROR)
            end

            local certs_dir = "/run/mkcert/"
            local cert_file = certs_dir .. name .. ".pem"
            local key_file = certs_dir .. name .. "-key.pem"

            local my_load_certificate_chain = function()
                local f = io.open(cert_file, "rb")
                if f == nil then
                    local ngx_pipe = require "ngx.pipe"
                    local cmd = { "/usr/bin/mkcert", "-cert-file", cert_file, "-key-file", key_file, name }
                    local opts = { environ = {"CAROOT="..certs_dir}, merge_stderr = true }
                    local proc, err = ngx_pipe.spawn(cmd, opts)
                    if proc == nil then
                        ngx.log(ngx.ERR, "failed to spawn mkcert command: ", err)
                        return ngx.exit(ngx.ERROR)
                    end

                    local data, err, partial = proc:stdout_read_all()
                    local ok, reason, status = proc:wait()
                    if not ok then
                        ngx.log(ngx.ERR, "failed to create cert for ", name, " reason: ", reason, " status: ", status)
                        ngx.log(ngx.ERR, "  output: ", data, " err: ", err, " partial: ", partial)
                        return ngx.exit(ngx.ERROR)
                    end
                    f = io.open(cert_file, "rb")
                end
                local a = f:read("a*")
                f:close()
                return a
            end
            local pem_cert_chain = assert(my_load_certificate_chain())

            local der_cert_chain, err = ssl.cert_pem_to_der(pem_cert_chain)
            if not der_cert_chain then
                ngx.log(ngx.ERR, "failed to convert certificate chain from PEM to DER: ", err)
                return ngx.exit(ngx.ERROR)
            end

            local ok, err = ssl.set_der_cert(der_cert_chain)
            if not ok then
                ngx.log(ngx.ERR, "failed to set DER cert: ", err)
                return ngx.exit(ngx.ERROR)
            end

            local my_load_private_key = function()
                local f = assert(io.open(key_file, "rb"))
                local a = f:read("a*")
                f:close()
                return a
            end
            local pem_pkey = assert(my_load_private_key())

            local der_pkey, err = ssl.priv_key_pem_to_der(pem_pkey, nil)
            if not der_pkey then
                ngx.log(ngx.ERR, "failed to convert private key from PEM to DER: ", err)
                return ngx.exit(ngx.ERROR)
            end

            local ok, err = ssl.set_der_priv_key(der_pkey)
            if not ok then
                ngx.log(ngx.ERR, "failed to set DER private key: ", err)
                return ngx.exit(ngx.ERROR)
            end
        }

        # We need to resolve the real names of our proxied servers.
        include resolver.conf;

        # Docker needs this. Don't ask.
        chunked_transfer_encoding on;

        proxy_read_timeout 900;

        # Use SNI during the TLS handshake with the upstream.
        proxy_ssl_server_name on;

        proxy_ssl_verify on;
        proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
        proxy_ssl_verify_depth 2;

        location ~ ^/v[12]/(.+)/manifests/([^/]+)$ {
            if ($forbidden) {
                add_header "Content-type" "application/json" always;
                # `code` from https://github.com/distribution/distribution/blob/main/registry/api/errcode/register.go
                return 403 "{\"errors\":[{\"code\":\"UNAUTHORIZED\",\"message\":\"image $http_host/$1:$2 is not covered by Rancher Desktop image-allow-list\"}]}\n";
            }
            proxy_pass https://$http_host;
        }

        location / {
            proxy_pass https://$http_host;
        }
    }
}
